/* soapClient.cpp
   Generated by gSOAP 2.8.17r from wxTrans.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.17r 2015-08-04 16:05:43 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__InitTrans(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__InitTrans *ns1__InitTrans, _ns1__InitTransResponse *ns1__InitTransResponse)
{	struct __ns1__InitTrans soap_tmp___ns1__InitTrans;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.176.100.185:9080/rminf/services/Trans";
	if (soap_action == NULL)
		soap_action = "";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InitTrans.ns1__InitTrans = ns1__InitTrans;
	soap_serializeheader(soap);
	soap_serialize___ns1__InitTrans(soap, &soap_tmp___ns1__InitTrans);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InitTrans(soap, &soap_tmp___ns1__InitTrans, "-ns1:InitTrans", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InitTrans(soap, &soap_tmp___ns1__InitTrans, "-ns1:InitTrans", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InitTransResponse)
		return soap_closesock(soap);
	ns1__InitTransResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InitTransResponse->soap_get(soap, "ns1:InitTransResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__WriteVehicleInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__WriteVehicleInfo *ns1__WriteVehicleInfo, _ns1__WriteVehicleInfoResponse *ns1__WriteVehicleInfoResponse)
{	struct __ns1__WriteVehicleInfo soap_tmp___ns1__WriteVehicleInfo;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.176.100.185:9080/rminf/services/Trans";
	if (soap_action == NULL)
		soap_action = "";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__WriteVehicleInfo.ns1__WriteVehicleInfo = ns1__WriteVehicleInfo;
	soap_serializeheader(soap);
	soap_serialize___ns1__WriteVehicleInfo(soap, &soap_tmp___ns1__WriteVehicleInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__WriteVehicleInfo(soap, &soap_tmp___ns1__WriteVehicleInfo, "-ns1:WriteVehicleInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__WriteVehicleInfo(soap, &soap_tmp___ns1__WriteVehicleInfo, "-ns1:WriteVehicleInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__WriteVehicleInfoResponse)
		return soap_closesock(soap);
	ns1__WriteVehicleInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__WriteVehicleInfoResponse->soap_get(soap, "ns1:WriteVehicleInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryLimitSpeed(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__QueryLimitSpeed *ns1__QueryLimitSpeed, _ns1__QueryLimitSpeedResponse *ns1__QueryLimitSpeedResponse)
{	struct __ns1__QueryLimitSpeed soap_tmp___ns1__QueryLimitSpeed;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.176.100.185:9080/rminf/services/Trans";
	if (soap_action == NULL)
		soap_action = "";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryLimitSpeed.ns1__QueryLimitSpeed = ns1__QueryLimitSpeed;
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryLimitSpeed(soap, &soap_tmp___ns1__QueryLimitSpeed);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryLimitSpeed(soap, &soap_tmp___ns1__QueryLimitSpeed, "-ns1:QueryLimitSpeed", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryLimitSpeed(soap, &soap_tmp___ns1__QueryLimitSpeed, "-ns1:QueryLimitSpeed", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryLimitSpeedResponse)
		return soap_closesock(soap);
	ns1__QueryLimitSpeedResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryLimitSpeedResponse->soap_get(soap, "ns1:QueryLimitSpeedResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QuerySyncTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__QuerySyncTime *ns1__QuerySyncTime, _ns1__QuerySyncTimeResponse *ns1__QuerySyncTimeResponse)
{	struct __ns1__QuerySyncTime soap_tmp___ns1__QuerySyncTime;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.176.100.185:9080/rminf/services/Trans";
	if (soap_action == NULL)
		soap_action = "";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QuerySyncTime.ns1__QuerySyncTime = ns1__QuerySyncTime;
	soap_serializeheader(soap);
	soap_serialize___ns1__QuerySyncTime(soap, &soap_tmp___ns1__QuerySyncTime);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QuerySyncTime(soap, &soap_tmp___ns1__QuerySyncTime, "-ns1:QuerySyncTime", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QuerySyncTime(soap, &soap_tmp___ns1__QuerySyncTime, "-ns1:QuerySyncTime", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QuerySyncTimeResponse)
		return soap_closesock(soap);
	ns1__QuerySyncTimeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QuerySyncTimeResponse->soap_get(soap, "ns1:QuerySyncTimeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetLastMessage(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetLastMessage *ns1__GetLastMessage, _ns1__GetLastMessageResponse *ns1__GetLastMessageResponse)
{	struct __ns1__GetLastMessage soap_tmp___ns1__GetLastMessage;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.176.100.185:9080/rminf/services/Trans";
	if (soap_action == NULL)
		soap_action = "";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetLastMessage.ns1__GetLastMessage = ns1__GetLastMessage;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetLastMessage(soap, &soap_tmp___ns1__GetLastMessage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetLastMessage(soap, &soap_tmp___ns1__GetLastMessage, "-ns1:GetLastMessage", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetLastMessage(soap, &soap_tmp___ns1__GetLastMessage, "-ns1:GetLastMessage", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetLastMessageResponse)
		return soap_closesock(soap);
	ns1__GetLastMessageResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetLastMessageResponse->soap_get(soap, "ns1:GetLastMessageResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
