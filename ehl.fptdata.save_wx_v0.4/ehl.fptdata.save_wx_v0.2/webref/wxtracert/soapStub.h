/* soapStub.h
   Generated by gSOAP 2.8.17r from wxTrans.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://webservice.tfc.tmri.com"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20817
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE__ns1__InitTrans
#define SOAP_TYPE__ns1__InitTrans (8)
/* ns1:InitTrans */
class SOAP_CMAC _ns1__InitTrans
{
public:
	std::string kkbh;	/* required element of type xsd:string */
	std::string fxlx;	/* required element of type xsd:string */
	LONG64 cdh;	/* required element of type xsd:long */
	std::string info;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique type id SOAP_TYPE__ns1__InitTrans */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__InitTrans() { _ns1__InitTrans::soap_default(NULL); }
	virtual ~_ns1__InitTrans() { }
};
#endif

#ifndef SOAP_TYPE__ns1__InitTransResponse
#define SOAP_TYPE__ns1__InitTransResponse (9)
/* ns1:InitTransResponse */
class SOAP_CMAC _ns1__InitTransResponse
{
public:
	LONG64 InitTransReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique type id SOAP_TYPE__ns1__InitTransResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__InitTransResponse() { _ns1__InitTransResponse::soap_default(NULL); }
	virtual ~_ns1__InitTransResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__WriteVehicleInfo
#define SOAP_TYPE__ns1__WriteVehicleInfo (10)
/* ns1:WriteVehicleInfo */
class SOAP_CMAC _ns1__WriteVehicleInfo
{
public:
	std::string kkbh;	/* required element of type xsd:string */
	std::string fxlx;	/* required element of type xsd:string */
	LONG64 cdh;	/* required element of type xsd:long */
	std::string hphm;	/* required element of type xsd:string */
	std::string hpzl;	/* required element of type xsd:string */
	std::string gcsj;	/* required element of type xsd:string */
	LONG64 clsd;	/* required element of type xsd:long */
	LONG64 clxs;	/* required element of type xsd:long */
	std::string wfdm;	/* required element of type xsd:string */
	LONG64 cwkc;	/* required element of type xsd:long */
	std::string hpys;	/* required element of type xsd:string */
	std::string cllx;	/* required element of type xsd:string */
	std::string fzhpzl;	/* required element of type xsd:string */
	std::string fzhphm;	/* required element of type xsd:string */
	std::string fzhpys;	/* required element of type xsd:string */
	std::string clpp;	/* required element of type xsd:string */
	std::string clwx;	/* required element of type xsd:string */
	std::string csys;	/* required element of type xsd:string */
	std::string tplj;	/* required element of type xsd:string */
	std::string tp1;	/* required element of type xsd:string */
	std::string tp2;	/* required element of type xsd:string */
	std::string tp3;	/* required element of type xsd:string */
	std::string tztp;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique type id SOAP_TYPE__ns1__WriteVehicleInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__WriteVehicleInfo() { _ns1__WriteVehicleInfo::soap_default(NULL); }
	virtual ~_ns1__WriteVehicleInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns1__WriteVehicleInfoResponse
#define SOAP_TYPE__ns1__WriteVehicleInfoResponse (11)
/* ns1:WriteVehicleInfoResponse */
class SOAP_CMAC _ns1__WriteVehicleInfoResponse
{
public:
	LONG64 WriteVehicleInfoReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique type id SOAP_TYPE__ns1__WriteVehicleInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__WriteVehicleInfoResponse() { _ns1__WriteVehicleInfoResponse::soap_default(NULL); }
	virtual ~_ns1__WriteVehicleInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryLimitSpeed
#define SOAP_TYPE__ns1__QueryLimitSpeed (12)
/* ns1:QueryLimitSpeed */
class SOAP_CMAC _ns1__QueryLimitSpeed
{
public:
	std::string kkbh;	/* required element of type xsd:string */
	std::string fxlx;	/* required element of type xsd:string */
	LONG64 cdh;	/* required element of type xsd:long */
	std::string cllx;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique type id SOAP_TYPE__ns1__QueryLimitSpeed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryLimitSpeed() { _ns1__QueryLimitSpeed::soap_default(NULL); }
	virtual ~_ns1__QueryLimitSpeed() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryLimitSpeedResponse
#define SOAP_TYPE__ns1__QueryLimitSpeedResponse (13)
/* ns1:QueryLimitSpeedResponse */
class SOAP_CMAC _ns1__QueryLimitSpeedResponse
{
public:
	LONG64 QueryLimitSpeedReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique type id SOAP_TYPE__ns1__QueryLimitSpeedResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryLimitSpeedResponse() { _ns1__QueryLimitSpeedResponse::soap_default(NULL); }
	virtual ~_ns1__QueryLimitSpeedResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QuerySyncTime
#define SOAP_TYPE__ns1__QuerySyncTime (14)
/* ns1:QuerySyncTime */
class SOAP_CMAC _ns1__QuerySyncTime
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique type id SOAP_TYPE__ns1__QuerySyncTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QuerySyncTime() { _ns1__QuerySyncTime::soap_default(NULL); }
	virtual ~_ns1__QuerySyncTime() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QuerySyncTimeResponse
#define SOAP_TYPE__ns1__QuerySyncTimeResponse (15)
/* ns1:QuerySyncTimeResponse */
class SOAP_CMAC _ns1__QuerySyncTimeResponse
{
public:
	std::string QuerySyncTimeReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique type id SOAP_TYPE__ns1__QuerySyncTimeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QuerySyncTimeResponse() { _ns1__QuerySyncTimeResponse::soap_default(NULL); }
	virtual ~_ns1__QuerySyncTimeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetLastMessage
#define SOAP_TYPE__ns1__GetLastMessage (16)
/* ns1:GetLastMessage */
class SOAP_CMAC _ns1__GetLastMessage
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique type id SOAP_TYPE__ns1__GetLastMessage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetLastMessage() { _ns1__GetLastMessage::soap_default(NULL); }
	virtual ~_ns1__GetLastMessage() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetLastMessageResponse
#define SOAP_TYPE__ns1__GetLastMessageResponse (17)
/* ns1:GetLastMessageResponse */
class SOAP_CMAC _ns1__GetLastMessageResponse
{
public:
	std::string GetLastMessageReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique type id SOAP_TYPE__ns1__GetLastMessageResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetLastMessageResponse() { _ns1__GetLastMessageResponse::soap_default(NULL); }
	virtual ~_ns1__GetLastMessageResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns1__InitTrans
#define SOAP_TYPE___ns1__InitTrans (24)
/* Operation wrapper: */
struct __ns1__InitTrans
{
public:
	_ns1__InitTrans *ns1__InitTrans;	/* optional element of type ns1:InitTrans */
public:
	int soap_type() const { return 24; } /* = unique type id SOAP_TYPE___ns1__InitTrans */
};
#endif

#ifndef SOAP_TYPE___ns1__WriteVehicleInfo
#define SOAP_TYPE___ns1__WriteVehicleInfo (28)
/* Operation wrapper: */
struct __ns1__WriteVehicleInfo
{
public:
	_ns1__WriteVehicleInfo *ns1__WriteVehicleInfo;	/* optional element of type ns1:WriteVehicleInfo */
public:
	int soap_type() const { return 28; } /* = unique type id SOAP_TYPE___ns1__WriteVehicleInfo */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryLimitSpeed
#define SOAP_TYPE___ns1__QueryLimitSpeed (32)
/* Operation wrapper: */
struct __ns1__QueryLimitSpeed
{
public:
	_ns1__QueryLimitSpeed *ns1__QueryLimitSpeed;	/* optional element of type ns1:QueryLimitSpeed */
public:
	int soap_type() const { return 32; } /* = unique type id SOAP_TYPE___ns1__QueryLimitSpeed */
};
#endif

#ifndef SOAP_TYPE___ns1__QuerySyncTime
#define SOAP_TYPE___ns1__QuerySyncTime (36)
/* Operation wrapper: */
struct __ns1__QuerySyncTime
{
public:
	_ns1__QuerySyncTime *ns1__QuerySyncTime;	/* optional element of type ns1:QuerySyncTime */
public:
	int soap_type() const { return 36; } /* = unique type id SOAP_TYPE___ns1__QuerySyncTime */
};
#endif

#ifndef SOAP_TYPE___ns1__GetLastMessage
#define SOAP_TYPE___ns1__GetLastMessage (40)
/* Operation wrapper: */
struct __ns1__GetLastMessage
{
public:
	_ns1__GetLastMessage *ns1__GetLastMessage;	/* optional element of type ns1:GetLastMessage */
public:
	int soap_type() const { return 40; } /* = unique type id SOAP_TYPE___ns1__GetLastMessage */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (41)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 41; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (42)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 42; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (44)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 44; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (47)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 47; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (48)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 48; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__InitTrans(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__InitTrans *ns1__InitTrans, _ns1__InitTransResponse *ns1__InitTransResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__WriteVehicleInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__WriteVehicleInfo *ns1__WriteVehicleInfo, _ns1__WriteVehicleInfoResponse *ns1__WriteVehicleInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryLimitSpeed(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__QueryLimitSpeed *ns1__QueryLimitSpeed, _ns1__QueryLimitSpeedResponse *ns1__QueryLimitSpeedResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QuerySyncTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__QuerySyncTime *ns1__QuerySyncTime, _ns1__QuerySyncTimeResponse *ns1__QuerySyncTimeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetLastMessage(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetLastMessage *ns1__GetLastMessage, _ns1__GetLastMessageResponse *ns1__GetLastMessageResponse);

#endif

/* End of soapStub.h */
