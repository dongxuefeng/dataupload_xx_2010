/* Trans.xml.h
   Generated by wsdl2h 2.8.17r from Trans.xml and typemap.dat
   2015-08-02 13:52:27 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2013 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on Trans.xml.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://webservice.tfc.tmri.com                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://webservice.tfc.tmri.com"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://webservice.tfc.tmri.com"
//gsoap ns1   schema namespace:	http://webservice.tfc.tmri.com
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class _ns1__InitTrans.
class _ns1__InitTrans;

//  Forward declaration of class _ns1__InitTransResponse.
class _ns1__InitTransResponse;

//  Forward declaration of class _ns1__WriteVehicleInfo.
class _ns1__WriteVehicleInfo;

//  Forward declaration of class _ns1__WriteVehicleInfoResponse.
class _ns1__WriteVehicleInfoResponse;

//  Forward declaration of class _ns1__QueryLimitSpeed.
class _ns1__QueryLimitSpeed;

//  Forward declaration of class _ns1__QueryLimitSpeedResponse.
class _ns1__QueryLimitSpeedResponse;

//  Forward declaration of class _ns1__QuerySyncTime.
class _ns1__QuerySyncTime;

//  Forward declaration of class _ns1__QuerySyncTimeResponse.
class _ns1__QuerySyncTimeResponse;

//  Forward declaration of class _ns1__GetLastMessage.
class _ns1__GetLastMessage;

//  Forward declaration of class _ns1__GetLastMessageResponse.
class _ns1__GetLastMessageResponse;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://webservice.tfc.tmri.com                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://webservice.tfc.tmri.com                                           *
 *                                                                            *
\******************************************************************************/



/// Top-level root element "http://webservice.tfc.tmri.com":InitTrans

/// "http://webservice.tfc.tmri.com":InitTrans is a complexType.
/// class _ns1__InitTrans operations:
/// - soap_new__ns1__InitTrans(soap*) allocate
/// - soap_new__ns1__InitTrans(soap*, int num) allocate array
/// - soap_new_req__ns1__InitTrans(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__InitTrans(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__InitTrans(soap*, _ns1__InitTrans*) deserialize from a stream
/// - int soap_write__ns1__InitTrans(soap, _ns1__InitTrans*) serialize to a stream
class _ns1__InitTrans
{ public:
/// Element kkbh of type xs:string.
    std::string                          kkbh                           1;	///< Required element.
/// Element fxlx of type xs:string.
    std::string                          fxlx                           1;	///< Required element.
/// Element cdh of type xs:long.
    LONG64                               cdh                            1;	///< Required element.
/// Element info of type xs:string.
    std::string                          info                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://webservice.tfc.tmri.com":InitTransResponse

/// "http://webservice.tfc.tmri.com":InitTransResponse is a complexType.
/// class _ns1__InitTransResponse operations:
/// - soap_new__ns1__InitTransResponse(soap*) allocate
/// - soap_new__ns1__InitTransResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__InitTransResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__InitTransResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__InitTransResponse(soap*, _ns1__InitTransResponse*) deserialize from a stream
/// - int soap_write__ns1__InitTransResponse(soap, _ns1__InitTransResponse*) serialize to a stream
class _ns1__InitTransResponse
{ public:
/// Element InitTransReturn of type xs:long.
    LONG64                               InitTransReturn                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://webservice.tfc.tmri.com":WriteVehicleInfo

/// "http://webservice.tfc.tmri.com":WriteVehicleInfo is a complexType.
/// class _ns1__WriteVehicleInfo operations:
/// - soap_new__ns1__WriteVehicleInfo(soap*) allocate
/// - soap_new__ns1__WriteVehicleInfo(soap*, int num) allocate array
/// - soap_new_req__ns1__WriteVehicleInfo(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__WriteVehicleInfo(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__WriteVehicleInfo(soap*, _ns1__WriteVehicleInfo*) deserialize from a stream
/// - int soap_write__ns1__WriteVehicleInfo(soap, _ns1__WriteVehicleInfo*) serialize to a stream
class _ns1__WriteVehicleInfo
{ public:
/// Element kkbh of type xs:string.
    std::string                          kkbh                           1;	///< Required element.
/// Element fxlx of type xs:string.
    std::string                          fxlx                           1;	///< Required element.
/// Element cdh of type xs:long.
    LONG64                               cdh                            1;	///< Required element.
/// Element hphm of type xs:string.
    std::string                          hphm                           1;	///< Required element.
/// Element hpzl of type xs:string.
    std::string                          hpzl                           1;	///< Required element.
/// Element gcsj of type xs:string.
    std::string                          gcsj                           1;	///< Required element.
/// Element clsd of type xs:long.
    LONG64                               clsd                           1;	///< Required element.
/// Element clxs of type xs:long.
    LONG64                               clxs                           1;	///< Required element.
/// Element wfdm of type xs:string.
    std::string                          wfdm                           1;	///< Required element.
/// Element cwkc of type xs:long.
    LONG64                               cwkc                           1;	///< Required element.
/// Element hpys of type xs:string.
    std::string                          hpys                           1;	///< Required element.
/// Element cllx of type xs:string.
    std::string                          cllx                           1;	///< Required element.
/// Element fzhpzl of type xs:string.
    std::string                          fzhpzl                         1;	///< Required element.
/// Element fzhphm of type xs:string.
    std::string                          fzhphm                         1;	///< Required element.
/// Element fzhpys of type xs:string.
    std::string                          fzhpys                         1;	///< Required element.
/// Element clpp of type xs:string.
    std::string                          clpp                           1;	///< Required element.
/// Element clwx of type xs:string.
    std::string                          clwx                           1;	///< Required element.
/// Element csys of type xs:string.
    std::string                          csys                           1;	///< Required element.
/// Element tplj of type xs:string.
    std::string                          tplj                           1;	///< Required element.
/// Element tp1 of type xs:string.
    std::string                          tp1                            1;	///< Required element.
/// Element tp2 of type xs:string.
    std::string                          tp2                            1;	///< Required element.
/// Element tp3 of type xs:string.
    std::string                          tp3                            1;	///< Required element.
/// Element tztp of type xs:string.
    std::string                          tztp                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://webservice.tfc.tmri.com":WriteVehicleInfoResponse

/// "http://webservice.tfc.tmri.com":WriteVehicleInfoResponse is a complexType.
/// class _ns1__WriteVehicleInfoResponse operations:
/// - soap_new__ns1__WriteVehicleInfoResponse(soap*) allocate
/// - soap_new__ns1__WriteVehicleInfoResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__WriteVehicleInfoResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__WriteVehicleInfoResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__WriteVehicleInfoResponse(soap*, _ns1__WriteVehicleInfoResponse*) deserialize from a stream
/// - int soap_write__ns1__WriteVehicleInfoResponse(soap, _ns1__WriteVehicleInfoResponse*) serialize to a stream
class _ns1__WriteVehicleInfoResponse
{ public:
/// Element WriteVehicleInfoReturn of type xs:long.
    LONG64                               WriteVehicleInfoReturn         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://webservice.tfc.tmri.com":QueryLimitSpeed

/// "http://webservice.tfc.tmri.com":QueryLimitSpeed is a complexType.
/// class _ns1__QueryLimitSpeed operations:
/// - soap_new__ns1__QueryLimitSpeed(soap*) allocate
/// - soap_new__ns1__QueryLimitSpeed(soap*, int num) allocate array
/// - soap_new_req__ns1__QueryLimitSpeed(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__QueryLimitSpeed(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__QueryLimitSpeed(soap*, _ns1__QueryLimitSpeed*) deserialize from a stream
/// - int soap_write__ns1__QueryLimitSpeed(soap, _ns1__QueryLimitSpeed*) serialize to a stream
class _ns1__QueryLimitSpeed
{ public:
/// Element kkbh of type xs:string.
    std::string                          kkbh                           1;	///< Required element.
/// Element fxlx of type xs:string.
    std::string                          fxlx                           1;	///< Required element.
/// Element cdh of type xs:long.
    LONG64                               cdh                            1;	///< Required element.
/// Element cllx of type xs:string.
    std::string                          cllx                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://webservice.tfc.tmri.com":QueryLimitSpeedResponse

/// "http://webservice.tfc.tmri.com":QueryLimitSpeedResponse is a complexType.
/// class _ns1__QueryLimitSpeedResponse operations:
/// - soap_new__ns1__QueryLimitSpeedResponse(soap*) allocate
/// - soap_new__ns1__QueryLimitSpeedResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__QueryLimitSpeedResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__QueryLimitSpeedResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__QueryLimitSpeedResponse(soap*, _ns1__QueryLimitSpeedResponse*) deserialize from a stream
/// - int soap_write__ns1__QueryLimitSpeedResponse(soap, _ns1__QueryLimitSpeedResponse*) serialize to a stream
class _ns1__QueryLimitSpeedResponse
{ public:
/// Element QueryLimitSpeedReturn of type xs:long.
    LONG64                               QueryLimitSpeedReturn          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://webservice.tfc.tmri.com":QuerySyncTime

/// "http://webservice.tfc.tmri.com":QuerySyncTime is a complexType.
/// class _ns1__QuerySyncTime operations:
/// - soap_new__ns1__QuerySyncTime(soap*) allocate
/// - soap_new__ns1__QuerySyncTime(soap*, int num) allocate array
/// - soap_new_req__ns1__QuerySyncTime(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__QuerySyncTime(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__QuerySyncTime(soap*, _ns1__QuerySyncTime*) deserialize from a stream
/// - int soap_write__ns1__QuerySyncTime(soap, _ns1__QuerySyncTime*) serialize to a stream
class _ns1__QuerySyncTime
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://webservice.tfc.tmri.com":QuerySyncTimeResponse

/// "http://webservice.tfc.tmri.com":QuerySyncTimeResponse is a complexType.
/// class _ns1__QuerySyncTimeResponse operations:
/// - soap_new__ns1__QuerySyncTimeResponse(soap*) allocate
/// - soap_new__ns1__QuerySyncTimeResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__QuerySyncTimeResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__QuerySyncTimeResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__QuerySyncTimeResponse(soap*, _ns1__QuerySyncTimeResponse*) deserialize from a stream
/// - int soap_write__ns1__QuerySyncTimeResponse(soap, _ns1__QuerySyncTimeResponse*) serialize to a stream
class _ns1__QuerySyncTimeResponse
{ public:
/// Element QuerySyncTimeReturn of type xs:string.
    std::string                          QuerySyncTimeReturn            1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://webservice.tfc.tmri.com":GetLastMessage

/// "http://webservice.tfc.tmri.com":GetLastMessage is a complexType.
/// class _ns1__GetLastMessage operations:
/// - soap_new__ns1__GetLastMessage(soap*) allocate
/// - soap_new__ns1__GetLastMessage(soap*, int num) allocate array
/// - soap_new_req__ns1__GetLastMessage(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetLastMessage(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetLastMessage(soap*, _ns1__GetLastMessage*) deserialize from a stream
/// - int soap_write__ns1__GetLastMessage(soap, _ns1__GetLastMessage*) serialize to a stream
class _ns1__GetLastMessage
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://webservice.tfc.tmri.com":GetLastMessageResponse

/// "http://webservice.tfc.tmri.com":GetLastMessageResponse is a complexType.
/// class _ns1__GetLastMessageResponse operations:
/// - soap_new__ns1__GetLastMessageResponse(soap*) allocate
/// - soap_new__ns1__GetLastMessageResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__GetLastMessageResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetLastMessageResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetLastMessageResponse(soap*, _ns1__GetLastMessageResponse*) deserialize from a stream
/// - int soap_write__ns1__GetLastMessageResponse(soap, _ns1__GetLastMessageResponse*) serialize to a stream
class _ns1__GetLastMessageResponse
{ public:
/// Element GetLastMessageReturn of type xs:string.
    std::string                          GetLastMessageReturn           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://webservice.tfc.tmri.com                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://webservice.tfc.tmri.com                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	TransSoapBinding 
//gsoap ns1  service type:	Trans 
//gsoap ns1  service port:	http://10.176.100.185:9080/rminf/services/Trans 
//gsoap ns1  service namespace:	http://webservice.tfc.tmri.com 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref TransSoapBinding

@section Service_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page TransSoapBinding Binding "TransSoapBinding"

@section TransSoapBinding_operations Operations of Binding  "TransSoapBinding"

  - @ref __ns1__InitTrans

  - @ref __ns1__WriteVehicleInfo

  - @ref __ns1__QueryLimitSpeed

  - @ref __ns1__QuerySyncTime

  - @ref __ns1__GetLastMessage

@section TransSoapBinding_ports Endpoints of Binding  "TransSoapBinding"

  - http://10.176.100.185:9080/rminf/services/Trans

Note: use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   TransSoapBinding                                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__InitTrans                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__InitTrans" of service binding "TransSoapBinding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__InitTrans(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__InitTrans*                    ns1__InitTrans,
    // output parameters:
    _ns1__InitTransResponse*            ns1__InitTransResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__InitTrans(
    struct soap *soap,
    // input parameters:
    _ns1__InitTrans*                    ns1__InitTrans,
    // output parameters:
    _ns1__InitTransResponse*            ns1__InitTransResponse
  );
@endcode

C++ proxy class (defined in soapTransSoapBindingProxy.h):
@code
  class TransSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapTransSoapBindingService.h):
@code
  class TransSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	InitTrans SOAP
//gsoap ns1  service method-style:	InitTrans document
//gsoap ns1  service method-encoding:	InitTrans literal
//gsoap ns1  service method-action:	InitTrans ""
//gsoap ns1  service method-output-action:	InitTrans Response
int __ns1__InitTrans(
    _ns1__InitTrans*                    ns1__InitTrans,	///< Input parameter
    _ns1__InitTransResponse*            ns1__InitTransResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__WriteVehicleInfo                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__WriteVehicleInfo" of service binding "TransSoapBinding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__WriteVehicleInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__WriteVehicleInfo*             ns1__WriteVehicleInfo,
    // output parameters:
    _ns1__WriteVehicleInfoResponse*     ns1__WriteVehicleInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__WriteVehicleInfo(
    struct soap *soap,
    // input parameters:
    _ns1__WriteVehicleInfo*             ns1__WriteVehicleInfo,
    // output parameters:
    _ns1__WriteVehicleInfoResponse*     ns1__WriteVehicleInfoResponse
  );
@endcode

C++ proxy class (defined in soapTransSoapBindingProxy.h):
@code
  class TransSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapTransSoapBindingService.h):
@code
  class TransSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	WriteVehicleInfo SOAP
//gsoap ns1  service method-style:	WriteVehicleInfo document
//gsoap ns1  service method-encoding:	WriteVehicleInfo literal
//gsoap ns1  service method-action:	WriteVehicleInfo ""
//gsoap ns1  service method-output-action:	WriteVehicleInfo Response
int __ns1__WriteVehicleInfo(
    _ns1__WriteVehicleInfo*             ns1__WriteVehicleInfo,	///< Input parameter
    _ns1__WriteVehicleInfoResponse*     ns1__WriteVehicleInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QueryLimitSpeed                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__QueryLimitSpeed" of service binding "TransSoapBinding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QueryLimitSpeed(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QueryLimitSpeed*              ns1__QueryLimitSpeed,
    // output parameters:
    _ns1__QueryLimitSpeedResponse*      ns1__QueryLimitSpeedResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QueryLimitSpeed(
    struct soap *soap,
    // input parameters:
    _ns1__QueryLimitSpeed*              ns1__QueryLimitSpeed,
    // output parameters:
    _ns1__QueryLimitSpeedResponse*      ns1__QueryLimitSpeedResponse
  );
@endcode

C++ proxy class (defined in soapTransSoapBindingProxy.h):
@code
  class TransSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapTransSoapBindingService.h):
@code
  class TransSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QueryLimitSpeed SOAP
//gsoap ns1  service method-style:	QueryLimitSpeed document
//gsoap ns1  service method-encoding:	QueryLimitSpeed literal
//gsoap ns1  service method-action:	QueryLimitSpeed ""
//gsoap ns1  service method-output-action:	QueryLimitSpeed Response
int __ns1__QueryLimitSpeed(
    _ns1__QueryLimitSpeed*              ns1__QueryLimitSpeed,	///< Input parameter
    _ns1__QueryLimitSpeedResponse*      ns1__QueryLimitSpeedResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuerySyncTime                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__QuerySyncTime" of service binding "TransSoapBinding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuerySyncTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QuerySyncTime*                ns1__QuerySyncTime,
    // output parameters:
    _ns1__QuerySyncTimeResponse*        ns1__QuerySyncTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuerySyncTime(
    struct soap *soap,
    // input parameters:
    _ns1__QuerySyncTime*                ns1__QuerySyncTime,
    // output parameters:
    _ns1__QuerySyncTimeResponse*        ns1__QuerySyncTimeResponse
  );
@endcode

C++ proxy class (defined in soapTransSoapBindingProxy.h):
@code
  class TransSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapTransSoapBindingService.h):
@code
  class TransSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuerySyncTime SOAP
//gsoap ns1  service method-style:	QuerySyncTime document
//gsoap ns1  service method-encoding:	QuerySyncTime literal
//gsoap ns1  service method-action:	QuerySyncTime ""
//gsoap ns1  service method-output-action:	QuerySyncTime Response
int __ns1__QuerySyncTime(
    _ns1__QuerySyncTime*                ns1__QuerySyncTime,	///< Input parameter
    _ns1__QuerySyncTimeResponse*        ns1__QuerySyncTimeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetLastMessage                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetLastMessage" of service binding "TransSoapBinding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetLastMessage(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetLastMessage*               ns1__GetLastMessage,
    // output parameters:
    _ns1__GetLastMessageResponse*       ns1__GetLastMessageResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetLastMessage(
    struct soap *soap,
    // input parameters:
    _ns1__GetLastMessage*               ns1__GetLastMessage,
    // output parameters:
    _ns1__GetLastMessageResponse*       ns1__GetLastMessageResponse
  );
@endcode

C++ proxy class (defined in soapTransSoapBindingProxy.h):
@code
  class TransSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapTransSoapBindingService.h):
@code
  class TransSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetLastMessage SOAP
//gsoap ns1  service method-style:	GetLastMessage document
//gsoap ns1  service method-encoding:	GetLastMessage literal
//gsoap ns1  service method-action:	GetLastMessage ""
//gsoap ns1  service method-output-action:	GetLastMessage Response
int __ns1__GetLastMessage(
    _ns1__GetLastMessage*               ns1__GetLastMessage,	///< Input parameter
    _ns1__GetLastMessageResponse*       ns1__GetLastMessageResponse	///< Output parameter
);

/**

@page TransSoapBinding Binding "TransSoapBinding"

@section TransSoapBinding_policy_enablers Policy Enablers of Binding  "TransSoapBinding"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://webservice.tfc.tmri.com"

  - <ns1:InitTrans> @ref _ns1__InitTrans
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__InitTrans(struct soap*, _ns1__InitTrans*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__InitTrans(struct soap*, _ns1__InitTrans*);
    @endcode

  - <ns1:InitTransResponse> @ref _ns1__InitTransResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__InitTransResponse(struct soap*, _ns1__InitTransResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__InitTransResponse(struct soap*, _ns1__InitTransResponse*);
    @endcode

  - <ns1:WriteVehicleInfo> @ref _ns1__WriteVehicleInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__WriteVehicleInfo(struct soap*, _ns1__WriteVehicleInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__WriteVehicleInfo(struct soap*, _ns1__WriteVehicleInfo*);
    @endcode

  - <ns1:WriteVehicleInfoResponse> @ref _ns1__WriteVehicleInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__WriteVehicleInfoResponse(struct soap*, _ns1__WriteVehicleInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__WriteVehicleInfoResponse(struct soap*, _ns1__WriteVehicleInfoResponse*);
    @endcode

  - <ns1:QueryLimitSpeed> @ref _ns1__QueryLimitSpeed
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QueryLimitSpeed(struct soap*, _ns1__QueryLimitSpeed*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QueryLimitSpeed(struct soap*, _ns1__QueryLimitSpeed*);
    @endcode

  - <ns1:QueryLimitSpeedResponse> @ref _ns1__QueryLimitSpeedResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QueryLimitSpeedResponse(struct soap*, _ns1__QueryLimitSpeedResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QueryLimitSpeedResponse(struct soap*, _ns1__QueryLimitSpeedResponse*);
    @endcode

  - <ns1:QuerySyncTime> @ref _ns1__QuerySyncTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QuerySyncTime(struct soap*, _ns1__QuerySyncTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QuerySyncTime(struct soap*, _ns1__QuerySyncTime*);
    @endcode

  - <ns1:QuerySyncTimeResponse> @ref _ns1__QuerySyncTimeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QuerySyncTimeResponse(struct soap*, _ns1__QuerySyncTimeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QuerySyncTimeResponse(struct soap*, _ns1__QuerySyncTimeResponse*);
    @endcode

  - <ns1:GetLastMessage> @ref _ns1__GetLastMessage
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetLastMessage(struct soap*, _ns1__GetLastMessage*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetLastMessage(struct soap*, _ns1__GetLastMessage*);
    @endcode

  - <ns1:GetLastMessageResponse> @ref _ns1__GetLastMessageResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetLastMessageResponse(struct soap*, _ns1__GetLastMessageResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetLastMessageResponse(struct soap*, _ns1__GetLastMessageResponse*);
    @endcode

*/

/* End of Trans.xml.h */
